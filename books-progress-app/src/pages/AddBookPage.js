// Generated by Copilot
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { addBook } from "../services/bookService";

const AddBookPage = () => {
  const navigate = useNavigate();
  // フォームの状態
  const [formData, setFormData] = useState({
    title: "",
    author: "",
    totalPages: "",
    currentPage: "",
    memo: "",
  });

  // エラーメッセージの状態
  const [errors, setErrors] = useState({});

  // 送信中の状態
  const [isSubmitting, setIsSubmitting] = useState(false); // 成功メッセージの状態
  const [success, setSuccess] = useState("");

  // フォーム入力変更ハンドラー
  const handleInputChange = (e) => {
    const { name, value } = e.target; // 数値型のフィールドの場合は数値に変換（空の文字列の場合は変換しない）
    let processedValue = value;

    if (name === "totalPages" || name === "currentPage") {
      // 空文字列の場合はそのまま（削除操作を許可するため）
      if (value === "") {
        processedValue = "";
      } else {
        // 数値以外の文字を除去
        const numericValue = value.replace(/[^\d]/g, "");

        // 先頭の不要な0を削除（ただし、0単体の場合は許可）
        if (numericValue === "0") {
          processedValue = "0";
        } else if (numericValue !== "") {
          // 0以外の数値の場合は先頭の0を削除
          processedValue = numericValue.replace(/^0+/, "");
        } else {
          // 数値以外の文字だけだった場合は空にする
          processedValue = "";
        }
      }
    }

    setFormData({
      ...formData,
      [name]: processedValue,
    });
  };
  // フォーム送信ハンドラー
  const handleSubmit = async (e) => {
    e.preventDefault(); // バリデーション
    const newErrors = {};
    if (!formData.title.trim()) {
      newErrors.title = "タイトルは必須です";
    }

    // 著者名の入力は任意に変更
    // if (!formData.author.trim()) {
    //   newErrors.author = "著者名は必須です";
    // }

    // 総ページ数の検証：未入力または0の場合はエラー
    if (formData.totalPages === "" || formData.totalPages === "0") {
      newErrors.totalPages = "有効なページ数を入力してください";
    }

    // 送信前に値を適切に数値変換（バリデーション後に行う）
    const submitData = {
      ...formData,
      totalPages: parseInt(formData.totalPages, 10) || 0,
      currentPage: parseInt(formData.currentPage, 10) || 0,
    };

    if (submitData.currentPage < 0) {
      newErrors.currentPage = "現在のページは0以上である必要があります";
    }

    if (submitData.currentPage > submitData.totalPages) {
      newErrors.currentPage =
        "現在のページは総ページ数を超えることはできません";
    }

    // エラーがあれば更新して関数を終了
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    // エラーをリセット
    setErrors({});
    setIsSubmitting(true);
    try {
      // 送信前に確実に数値に変換したデータを使用
      const bookData = {
        ...formData,
        totalPages: formData.totalPages ? parseInt(formData.totalPages, 10) : 0,
        currentPage: formData.currentPage
          ? parseInt(formData.currentPage, 10)
          : 0,
      };

      // BookServiceを使用して書籍を追加（非同期処理）
      const result = await addBook(bookData);

      if (result.success) {
        // 成功メッセージを表示
        setSuccess("書籍が追加されました！");

        // フォームをリセット
        setFormData({
          title: "",
          author: "",
          totalPages: "",
          currentPage: "",
          memo: "",
        });

        // 2秒後に書籍リストページへ遷移
        setTimeout(() => {
          navigate("/");
        }, 2000);
      } else {
        // エラーメッセージを表示
        setErrors({
          submit:
            result.message ||
            "データの保存中にエラーが発生しました。もう一度お試しください。",
        });
      }
    } catch (error) {
      console.error("書籍追加エラー:", error);
      setErrors({
        submit: "エラーが発生しました。ネットワーク接続を確認してください。",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div>
      <h2 className="page-title">新しい書籍を追加</h2>

      {success && <div className="success-message">{success}</div>}
      {errors.submit && <div className="error-message">{errors.submit}</div>}

      <div className="form-container">
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="title">
              タイトル <span className="required">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              className={errors.title ? "error" : ""}
              disabled={isSubmitting}
            />
            {errors.title && <p className="error-text">{errors.title}</p>}
          </div>{" "}
          <div className="form-group">
            <label htmlFor="author">著者</label>
            <input
              type="text"
              id="author"
              name="author"
              value={formData.author}
              onChange={handleInputChange}
              className={errors.author ? "error" : ""}
              disabled={isSubmitting}
            />
            {errors.author && <p className="error-text">{errors.author}</p>}
          </div>
          <div className="form-group">
            <label htmlFor="totalPages">
              総ページ数 <span className="required">*</span>
            </label>
            <input
              type="text"
              id="totalPages"
              name="totalPages"
              value={formData.totalPages}
              onChange={handleInputChange}
              inputMode="numeric"
              placeholder="ページ数を入力"
              className={errors.totalPages ? "error" : ""}
              disabled={isSubmitting}
            />
            {errors.totalPages && (
              <p className="error-text">{errors.totalPages}</p>
            )}
          </div>
          <div className="form-group">
            <label htmlFor="currentPage">現在のページ</label>
            <input
              type="text"
              id="currentPage"
              name="currentPage"
              value={formData.currentPage}
              onChange={handleInputChange}
              inputMode="numeric"
              placeholder="現在のページ数を入力"
              className={errors.currentPage ? "error" : ""}
              disabled={isSubmitting}
            />
            {errors.currentPage && (
              <p className="error-text">{errors.currentPage}</p>
            )}
          </div>
          <div className="form-group">
            <label htmlFor="memo">メモ（任意）</label>
            <textarea
              id="memo"
              name="memo"
              value={formData.memo}
              onChange={handleInputChange}
              rows="3"
              disabled={isSubmitting}
            />
          </div>
          <div className="form-actions">
            <button type="submit" className="btn" disabled={isSubmitting}>
              {isSubmitting ? "追加中..." : "書籍を追加"}
            </button>
            <button
              type="button"
              className="btn btn-secondary"
              onClick={() => navigate("/")}
              disabled={isSubmitting}
            >
              キャンセル
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddBookPage;
