// Generated by Copilot
import React, { useState } from "react";

const BookCard = ({ book, onUpdateProgress, onDelete }) => {
  // 詳細表示用のポップアップ状態
  const [showDetails, setShowDetails] = useState(false);

  // 進捗パーセンテージを計算
  const calculateProgress = (currentPage, totalPages) => {
    if (!totalPages) return 0;
    return Math.round((currentPage / totalPages) * 100);
  };

  // 日付を整形する関数
  const formatDate = (dateString) => {
    if (!dateString) return "未設定";
    const date = new Date(dateString);
    return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`;
  };

  // ポップアップの外側クリックでポップアップを閉じる
  const handleOutsideClick = (e) => {
    // イベントがポップアップの背景からのものであれば、閉じる
    if (e.target.className === "book-details-popup-overlay") {
      setShowDetails(false);
    }
  };

  // ESCキーでポップアップを閉じる処理
  React.useEffect(() => {
    const handleEsc = (e) => {
      if (e.key === "Escape") {
        setShowDetails(false);
      }
    };

    if (showDetails) {
      // ポップアップが表示されている場合のみイベントリスナーを追加
      window.addEventListener("keydown", handleEsc);
    }

    return () => {
      window.removeEventListener("keydown", handleEsc);
    };
  }, [showDetails]);

  // 最小限の情報表示カード
  const renderMinimalCard = () => {
    const progressPercentage = calculateProgress(
      book.currentPage,
      book.totalPages
    );

    return (
      <div className="book-card" onClick={() => setShowDetails(true)}>
        <h3 className="book-title">{book.title}</h3>

        <div className="book-progress">
          <div className="progress-bar">
            <div
              className="progress-fill"
              style={{
                width: `${progressPercentage}%`,
              }}
            ></div>
          </div>

          <p>
            <span>
              {book.currentPage} / {book.totalPages} ページ
            </span>
            <span>{progressPercentage}%</span>
          </p>
        </div>

        <div
          className={`book-status-indicator ${
            book.isCompleted ? "status-completed" : "status-reading"
          }`}
        >
          {book.isCompleted ? "完読" : "読書中"}
        </div>
      </div>
    );
  };

  // 詳細情報を表示するポップアップ
  const renderDetailsPopup = () => (
    <div className="book-details-popup-overlay" onClick={handleOutsideClick}>
      <div className="book-details-popup">
        <button
          className="close-popup-btn"
          onClick={() => setShowDetails(false)}
        >
          ×
        </button>

        <h2 className="book-title">{book.title}</h2>
        <p className="book-author">著者: {book.author}</p>

        <div
          className={`book-status ${
            book.isCompleted ? "status-completed" : "status-reading"
          }`}
        >
          {book.isCompleted ? "完読済み" : "読書中"}
        </div>

        <div className="book-progress">
          <p>
            {book.currentPage} / {book.totalPages} ページ (
            {calculateProgress(book.currentPage, book.totalPages)}%)
          </p>
          <div className="progress-bar">
            <div
              className="progress-fill"
              style={{
                width: `${calculateProgress(
                  book.currentPage,
                  book.totalPages
                )}%`,
              }}
            ></div>
          </div>
        </div>

        <div className="book-dates">
          <p className="text-muted">読書開始: {formatDate(book.startDate)}</p>
          <p className="text-muted">
            最終更新: {formatDate(book.lastUpdateDate)}
          </p>
        </div>

        {!book.isCompleted && (
          <div className="progress-update">
            <label htmlFor={`progress-${book.id}`}>現在のページ:</label>
            <div className="progress-input">
              <input
                type="number"
                id={`progress-${book.id}`}
                min="0"
                max={book.totalPages}
                defaultValue={book.currentPage}
                onChange={(e) => onUpdateProgress(book.id, e.target.value)}
              />
              <span>/ {book.totalPages}</span>
            </div>
          </div>
        )}

        {book.memo && (
          <div className="book-memo">
            <strong>メモ:</strong>
            <p>{book.memo}</p>
          </div>
        )}

        <div className="book-actions">
          <button className="btn btn-danger" onClick={() => onDelete(book.id)}>
            削除
          </button>
          <button className="btn" onClick={() => setShowDetails(false)}>
            閉じる
          </button>
        </div>
      </div>
    </div>
  );

  return (
    <>
      {/* 最小限の情報カードを表示 */}
      {renderMinimalCard()}

      {/* 詳細ポップアップ（表示フラグがtrueの場合のみ表示） */}
      {showDetails && renderDetailsPopup()}
    </>
  );
};

export default BookCard;
