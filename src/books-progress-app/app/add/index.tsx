import { useState } from "react";
import { StyleSheet, Text, TextInput, View, TouchableOpacity, Alert, ScrollView } from "react-native";
import { Stack, useRouter } from "expo-router";
import { useColorScheme } from "react-native";
import { colorScheme, Colors } from "../../constants/Colors";

/**
 * 書籍追加画面 - 新しい書籍を登録するためのフォーム
 * 
 * Generated by Copilot
 */
export default function AddBookScreen() {
  const router = useRouter();
  const colorMode = useColorScheme();
  const colors = colorMode === 'dark' ? colorScheme.dark : colorScheme.light;
  
  // フォーム状態管理
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [totalPages, setTotalPages] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // バリデーション関数
  const validateForm = () => {
    if (!title.trim()) {
      Alert.alert('エラー', 'タイトルを入力してください');
      return false;
    }
    if (!author.trim()) {
      Alert.alert('エラー', '著者名を入力してください');
      return false;
    }
    if (!totalPages.trim() || isNaN(parseInt(totalPages, 10))) {
      Alert.alert('エラー', '有効なページ数を入力してください');
      return false;
    }
    return true;
  };
  
  // 書籍追加処理（後で実装）
  const addBook = () => {
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    // データ登録処理（後で実装）
    Alert.alert('成功', '書籍を追加しました（ダミー）', [
      {
        text: 'OK',
        onPress: () => {
          router.back();
        },
      },
    ]);
    
    setIsSubmitting(false);
  };

  return (
    <>
      <Stack.Screen options={{ title: '書籍を追加' }} />
      
      <ScrollView
        style={[styles.container, { backgroundColor: colors.background }]}
        keyboardShouldPersistTaps="handled"
      >
        <Text style={[styles.label, { color: colors.text }]}>タイトル</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }]}
          value={title}
          onChangeText={setTitle}
          placeholder="書籍のタイトル"
          placeholderTextColor={Colors.placeholder}
        />
        
        <Text style={[styles.label, { color: colors.text }]}>著者</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }]}
          value={author}
          onChangeText={setAuthor}
          placeholder="著者名"
          placeholderTextColor={Colors.placeholder}
        />
        
        <Text style={[styles.label, { color: colors.text }]}>総ページ数</Text>
        <TextInput
          style={[styles.input, { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }]}
          value={totalPages}
          onChangeText={setTotalPages}
          placeholder="総ページ数"
          placeholderTextColor={Colors.placeholder}
          keyboardType="number-pad"
        />
        
        <TouchableOpacity
          style={[styles.button, { backgroundColor: Colors.primary, opacity: isSubmitting ? 0.7 : 1 }]}
          onPress={addBook}
          disabled={isSubmitting}
        >
          <Text style={styles.buttonText}>
            {isSubmitting ? '登録中...' : '登録する'}
          </Text>
        </TouchableOpacity>
      </ScrollView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  label: {
    fontSize: 16,
    marginBottom: 8,
    marginTop: 16,
  },
  input: {
    height: 48,
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 12,
    fontSize: 16,
  },
  button: {
    height: 50,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 32,
    marginBottom: 16,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
