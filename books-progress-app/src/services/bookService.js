// Generated by Copilot
/**
 * ローカルストレージを使用したデータ管理サービス
 * 書籍データ操作の基本関数を提供
 */

// ローカルストレージからデータを取得するヘルパー関数
const getLocalData = (key, defaultValue = null) => {
  try {
    const data = localStorage.getItem(key);
    return data ? JSON.parse(data) : defaultValue;
  } catch (error) {
    console.error(`ローカルストレージからの読み込みエラー (${key}):`, error);
    return defaultValue;
  }
};

// 書籍を追加する
export const addBook = (bookData) => {
  try {
    // ローカルストレージから既存の書籍リストを取得
    const existingBooks = getLocalData("books", []);

    // 新しい書籍データを生成（ID、日付などを追加）
    const newBook = {
      id: `book_${Date.now()}`, // ユニークIDの生成
      ...bookData,
      isCompleted: bookData.currentPage >= bookData.totalPages,
      startDate: new Date().toISOString(),
      lastUpdateDate: new Date().toISOString(),
    };

    // 書籍リストを更新
    const updatedBooks = [...existingBooks, newBook];

    // ローカルストレージに保存
    localStorage.setItem("books", JSON.stringify(updatedBooks));

    return {
      success: true,
      bookId: newBook.id,
      message: "書籍が正常に追加されました",
    };
  } catch (error) {
    console.error("書籍追加エラー:", error);
    return {
      success: false,
      error: "storage-error",
      message: "書籍の保存中にエラーが発生しました",
    };
  }
};

// ユーザーの全書籍を取得する
export const getAllBooks = () => {
  try {
    // ローカルストレージから書籍リストを取得
    const books = getLocalData("books", []);

    return {
      success: true,
      books,
    };
  } catch (error) {
    console.error("書籍一覧取得エラー:", error);
    return {
      success: false,
      error: "storage-error",
      message: "書籍データの取得中にエラーが発生しました",
      books: [],
    };
  }
};

// 書籍情報を更新する
export const updateBook = (bookId, updateData) => {
  try {
    // ローカルストレージから書籍リストを取得
    const books = getLocalData("books", []);

    // 更新対象の書籍を探す
    const bookIndex = books.findIndex((book) => book.id === bookId);

    // 書籍が見つからない場合はエラー
    if (bookIndex === -1) {
      return {
        success: false,
        error: "not-found",
        message: "指定された書籍が見つかりません",
      };
    }

    // 書籍データを更新
    const updatedBook = {
      ...books[bookIndex],
      ...updateData,
      lastUpdateDate: new Date().toISOString(),
    };

    // 完読状態も更新
    if (updatedBook.currentPage >= updatedBook.totalPages) {
      updatedBook.isCompleted = true;
      updatedBook.currentPage = updatedBook.totalPages;
    }

    // 書籍リストを更新
    const updatedBooks = [
      ...books.slice(0, bookIndex),
      updatedBook,
      ...books.slice(bookIndex + 1),
    ];

    // ローカルストレージに保存
    localStorage.setItem("books", JSON.stringify(updatedBooks));

    return {
      success: true,
      book: updatedBook,
      message: "書籍情報が更新されました",
    };
  } catch (error) {
    console.error("書籍更新エラー:", error);
    return {
      success: false,
      error: "storage-error",
      message: "書籍データの更新中にエラーが発生しました",
    };
  }
};

// 書籍を削除する
export const deleteBook = (bookId) => {
  try {
    // ローカルストレージから書籍リストを取得
    const books = getLocalData("books", []);

    // 削除対象の書籍を探す
    const bookIndex = books.findIndex((book) => book.id === bookId);

    // 書籍が見つからない場合はエラー
    if (bookIndex === -1) {
      return {
        success: false,
        error: "not-found",
        message: "指定された書籍が見つかりません",
      };
    }

    // 書籍を削除
    const updatedBooks = [
      ...books.slice(0, bookIndex),
      ...books.slice(bookIndex + 1),
    ];

    // ローカルストレージに保存
    localStorage.setItem("books", JSON.stringify(updatedBooks));

    return {
      success: true,
      message: "書籍が削除されました",
    };
  } catch (error) {
    console.error("書籍削除エラー:", error);
    return {
      success: false,
      error: "storage-error",
      message: "書籍の削除中にエラーが発生しました",
    };
  }
};

// 読書進捗を更新する
export const updateProgress = (bookId, currentPage) => {
  return updateBook(bookId, { currentPage });
};

// 読書統計を取得する
export const getReadingStats = () => {
  try {
    // ローカルストレージから書籍リストを取得
    const books = getLocalData("books", []);

    // 初期値
    const stats = {
      totalBooks: books.length,
      completedBooks: 0,
      inProgressBooks: 0,
      totalPages: 0,
      readPages: 0,
    };

    // 書籍データから統計を計算
    books.forEach((book) => {
      stats.totalPages += book.totalPages || 0;
      stats.readPages += Math.min(book.currentPage || 0, book.totalPages || 0);

      if (book.isCompleted) {
        stats.completedBooks += 1;
      } else {
        stats.inProgressBooks += 1;
      }
    });

    return {
      success: true,
      stats,
    };
  } catch (error) {
    console.error("統計取得エラー:", error);
    return {
      success: false,
      error: "storage-error",
      message: "統計データの取得中にエラーが発生しました",
      stats: {
        totalBooks: 0,
        completedBooks: 0,
        inProgressBooks: 0,
        totalPages: 0,
        readPages: 0,
      },
    };
  }
};
