// Generated by Copilot
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { addBook } from "../services/bookService";

const AddBookPage = () => {
  const navigate = useNavigate();

  // フォームの状態
  const [formData, setFormData] = useState({
    title: "",
    author: "",
    totalPages: 0,
    currentPage: 0,
    memo: "",
  });

  // エラーメッセージの状態
  const [errors, setErrors] = useState({});

  // 成功メッセージの状態
  const [success, setSuccess] = useState("");

  // フォーム入力変更ハンドラー
  const handleInputChange = (e) => {
    const { name, value } = e.target;

    // 数値型のフィールドの場合は数値に変換
    const processedValue =
      name === "totalPages" || name === "currentPage"
        ? parseInt(value, 10) || 0
        : value;

    setFormData({
      ...formData,
      [name]: processedValue,
    });
  };

  // フォーム送信ハンドラー
  const handleSubmit = (e) => {
    e.preventDefault();

    // バリデーション
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = "タイトルは必須です";
    }

    if (!formData.author.trim()) {
      newErrors.author = "著者名は必須です";
    }

    if (formData.totalPages <= 0) {
      newErrors.totalPages = "有効なページ数を入力してください";
    }

    if (formData.currentPage < 0) {
      newErrors.currentPage = "現在のページは0以上である必要があります";
    }

    if (formData.currentPage > formData.totalPages) {
      newErrors.currentPage =
        "現在のページは総ページ数を超えることはできません";
    }

    // エラーがあれば更新して関数を終了
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    // エラーをリセット
    setErrors({});

    // BookServiceを使用して書籍を追加
    const result = addBook(formData);

    if (result.success) {
      // 成功メッセージを表示
      setSuccess("書籍が追加されました！");

      // フォームをリセット
      setFormData({
        title: "",
        author: "",
        totalPages: 0,
        currentPage: 0,
        memo: "",
      });

      // 2秒後に書籍リストページへ遷移
      setTimeout(() => {
        navigate("/books");
      }, 2000);
    } else {
      // エラーメッセージを表示
      setErrors({
        submit:
          result.message ||
          "データの保存中にエラーが発生しました。もう一度お試しください。",
      });
    }
  };

  return (
    <div>
      <h2 className="page-title">新しい書籍を追加</h2>

      {success && <div className="success-message">{success}</div>}
      {errors.submit && <div className="error-message">{errors.submit}</div>}

      <div className="form-container">
        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="title">
              タイトル <span className="required">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              className={errors.title ? "error" : ""}
            />
            {errors.title && <p className="error-text">{errors.title}</p>}
          </div>

          <div className="form-group">
            <label htmlFor="author">
              著者 <span className="required">*</span>
            </label>
            <input
              type="text"
              id="author"
              name="author"
              value={formData.author}
              onChange={handleInputChange}
              className={errors.author ? "error" : ""}
            />
            {errors.author && <p className="error-text">{errors.author}</p>}
          </div>

          <div className="form-group">
            <label htmlFor="totalPages">
              総ページ数 <span className="required">*</span>
            </label>
            <input
              type="number"
              id="totalPages"
              name="totalPages"
              value={formData.totalPages}
              onChange={handleInputChange}
              min="1"
              className={errors.totalPages ? "error" : ""}
            />
            {errors.totalPages && (
              <p className="error-text">{errors.totalPages}</p>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="currentPage">現在のページ</label>
            <input
              type="number"
              id="currentPage"
              name="currentPage"
              value={formData.currentPage}
              onChange={handleInputChange}
              min="0"
              max={formData.totalPages}
              className={errors.currentPage ? "error" : ""}
            />
            {errors.currentPage && (
              <p className="error-text">{errors.currentPage}</p>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="memo">メモ（任意）</label>
            <textarea
              id="memo"
              name="memo"
              value={formData.memo}
              onChange={handleInputChange}
              rows="3"
            />
          </div>

          <div className="form-actions">
            <button type="submit" className="btn">
              書籍を追加
            </button>
            <button
              type="button"
              className="btn btn-secondary"
              onClick={() => navigate("/books")}
            >
              キャンセル
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddBookPage;
