// Generated by Copilot
import { initializeApp } from "firebase/app";
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  doc,
  updateDoc,
  deleteDoc,
  query,
  where,
  serverTimestamp,
} from "firebase/firestore";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
} from "firebase/auth";

// 設定を外部ファイルから取得
import firebaseConfig from "../firebase-config";

/**
 * Firebase設定
 * あなたのFirebase Consoleから取得した設定情報に置き換えてください
 */
// export const firebaseConfig = {
//   apiKey: "FIREBASE_API_KEY_HERE",
//   authDomain: "FIREBASE_AUTH_DOMAIN_HERE",
//   projectId: "FIREBASE_PROJECT_ID_HERE",
//   storageBucket: "FIREBASE_STORAGE_BUCKET_HERE",
//   messagingSenderId: "FIREBASE_MESSAGING_SENDER_ID_HERE",
//   appId: "FIREBASE_APP_ID_HERE"
// };

// Firebase初期化
let app;
let db;
let auth;

// Firebase初期化用の関数
export const initializeFirebase = () => {
  try {
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);
    console.log("Firebase初期化完了");
    return true;
  } catch (error) {
    console.error("Firebase初期化エラー:", error);
    return false;
  }
};

// 現在のユーザーがログインしているかチェック
export const getCurrentUser = () => {
  return auth.currentUser;
};

// 認証状態の変更を監視
export const onAuthStateChange = (callback) => {
  return onAuthStateChanged(auth, callback);
};

// メールとパスワードで新規ユーザー登録
export const registerWithEmail = async (email, password) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(
      auth,
      email,
      password
    );
    return {
      success: true,
      user: userCredential.user,
      message: "ユーザー登録が完了しました",
    };
  } catch (error) {
    console.error("ユーザー登録エラー:", error);

    let message = "登録中にエラーが発生しました";
    if (error.code === "auth/email-already-in-use") {
      message = "このメールアドレスは既に使用されています";
    } else if (error.code === "auth/invalid-email") {
      message = "メールアドレスの形式が正しくありません";
    } else if (error.code === "auth/weak-password") {
      message = "パスワードが弱すぎます";
    }

    return {
      success: false,
      message,
    };
  }
};

// メールとパスワードでログイン
export const loginWithEmail = async (email, password) => {
  try {
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );
    return {
      success: true,
      user: userCredential.user,
      message: "ログインしました",
    };
  } catch (error) {
    console.error("ログインエラー:", error);

    let message = "ログイン中にエラーが発生しました";
    if (error.code === "auth/invalid-credential") {
      message = "メールアドレスまたはパスワードが正しくありません";
    } else if (error.code === "auth/user-not-found") {
      message = "ユーザーが見つかりません";
    }

    return {
      success: false,
      message,
    };
  }
};

// ログアウト
export const logout = async () => {
  try {
    await signOut(auth);
    return {
      success: true,
      message: "ログアウトしました",
    };
  } catch (error) {
    console.error("ログアウトエラー:", error);
    return {
      success: false,
      message: "ログアウト中にエラーが発生しました",
    };
  }
};

// 書籍を追加
export const addBookToFirebase = async (userId, bookData) => {
  try {
    if (!db || !userId)
      return {
        success: false,
        message: "Firebaseまたはユーザー認証情報が利用できません",
      };

    // 既存のIDを削除（Firestoreが自動で生成）
    const { id, ...bookWithoutId } = bookData;

    // 書籍コレクションに追加
    const booksRef = collection(db, "books");
    const newBook = {
      ...bookWithoutId,
      userId,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
    };

    const docRef = await addDoc(booksRef, newBook);

    return {
      success: true,
      bookId: docRef.id,
      message: "書籍がFirebaseに保存されました",
    };
  } catch (error) {
    console.error("Firebase書籍追加エラー:", error);
    return {
      success: false,
      message: "書籍の保存中にエラーが発生しました",
    };
  }
};

// ユーザーの全書籍を取得
export const getAllBooksFromFirebase = async (userId) => {
  try {
    if (!db || !userId)
      return {
        success: false,
        books: [],
        message: "Firebaseまたはユーザー認証情報が利用できません",
      };

    // ユーザーの書籍のみをクエリ
    const booksRef = collection(db, "books");
    const q = query(booksRef, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);

    const books = [];
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      books.push({
        id: doc.id,
        ...data,
        createdAt: data.createdAt
          ? data.createdAt.toDate().toISOString()
          : null,
        updatedAt: data.updatedAt
          ? data.updatedAt.toDate().toISOString()
          : null,
      });
    });

    return {
      success: true,
      books,
    };
  } catch (error) {
    console.error("Firebase書籍取得エラー:", error);
    return {
      success: false,
      books: [],
      message: "書籍データの取得中にエラーが発生しました",
    };
  }
};

// 書籍を更新
export const updateBookInFirebase = async (bookId, updateData) => {
  try {
    if (!db)
      return {
        success: false,
        message: "Firebaseが利用できません",
      };

    // 更新データに更新日時を追加
    const updates = {
      ...updateData,
      updatedAt: serverTimestamp(),
    };

    // 書籍ドキュメントを更新
    const bookRef = doc(db, "books", bookId);
    await updateDoc(bookRef, updates);

    return {
      success: true,
      message: "書籍が更新されました",
    };
  } catch (error) {
    console.error("Firebase書籍更新エラー:", error);
    return {
      success: false,
      message: "書籍の更新中にエラーが発生しました",
    };
  }
};

// 書籍を削除
export const deleteBookFromFirebase = async (bookId) => {
  try {
    if (!db)
      return {
        success: false,
        message: "Firebaseが利用できません",
      };

    // 書籍ドキュメントを削除
    const bookRef = doc(db, "books", bookId);
    await deleteDoc(bookRef);

    return {
      success: true,
      message: "書籍が削除されました",
    };
  } catch (error) {
    console.error("Firebase書籍削除エラー:", error);
    return {
      success: false,
      message: "書籍の削除中にエラーが発生しました",
    };
  }
};
