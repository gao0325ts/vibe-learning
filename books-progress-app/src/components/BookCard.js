// Generated by Copilot
import React from "react";

const BookCard = ({ book, onUpdateProgress, onDelete }) => {
  // 進捗パーセンテージを計算
  const calculateProgress = (currentPage, totalPages) => {
    if (!totalPages) return 0;
    return Math.round((currentPage / totalPages) * 100);
  };

  // 日付を整形する関数
  const formatDate = (dateString) => {
    if (!dateString) return "未設定";
    const date = new Date(dateString);
    return `${date.getFullYear()}年${date.getMonth() + 1}月${date.getDate()}日`;
  };

  return (
    <div className="book-card">
      <h3 className="book-title">{book.title}</h3>
      <p className="book-author">著者: {book.author}</p>

      <div
        className={`book-status ${
          book.isCompleted ? "status-completed" : "status-reading"
        }`}
      >
        {book.isCompleted ? "完読済み" : "読書中"}
      </div>

      <div className="book-progress">
        <p>
          {book.currentPage} / {book.totalPages} ページ (
          {calculateProgress(book.currentPage, book.totalPages)}%)
        </p>
        <div className="progress-bar">
          <div
            className="progress-fill"
            style={{
              width: `${calculateProgress(book.currentPage, book.totalPages)}%`,
            }}
          ></div>
        </div>
      </div>

      <div className="book-dates">
        <p className="text-muted">読書開始: {formatDate(book.startDate)}</p>
        <p className="text-muted">
          最終更新: {formatDate(book.lastUpdateDate)}
        </p>
      </div>

      {!book.isCompleted && (
        <div className="progress-update">
          <label htmlFor={`progress-${book.id}`}>現在のページ:</label>
          <div className="progress-input">
            <input
              type="number"
              id={`progress-${book.id}`}
              min="0"
              max={book.totalPages}
              defaultValue={book.currentPage}
              onChange={(e) => onUpdateProgress(book.id, e.target.value)}
            />
            <span>/ {book.totalPages}</span>
          </div>
        </div>
      )}

      {book.memo && (
        <div className="book-memo">
          <strong>メモ:</strong>
          <p>{book.memo}</p>
        </div>
      )}

      <div className="book-actions">
        <button className="btn btn-danger" onClick={() => onDelete(book.id)}>
          削除
        </button>
      </div>
    </div>
  );
};

export default BookCard;
