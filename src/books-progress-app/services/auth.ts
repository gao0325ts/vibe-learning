import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  User,
  onAuthStateChanged
} from 'firebase/auth';
import { auth } from './firebase';

/**
 * Firebase認証サービス - ユーザー認証機能を提供
 * 
 * Generated by Copilot
 */

// ユーザー登録
export const registerUser = async (email: string, password: string) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    return { user: userCredential.user, error: null };
  } catch (error: any) {
    return {
      user: null,
      error: {
        code: error.code,
        message: getAuthErrorMessage(error.code)
      }
    };
  }
};

// ログイン
export const loginUser = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(auth, email, password);
    return { user: userCredential.user, error: null };
  } catch (error: any) {
    return {
      user: null,
      error: {
        code: error.code,
        message: getAuthErrorMessage(error.code)
      }
    };
  }
};

// ログアウト
export const logoutUser = async () => {
  try {
    await signOut(auth);
    return { success: true, error: null };
  } catch (error: any) {
    return {
      success: false,
      error: {
        code: error.code,
        message: getAuthErrorMessage(error.code)
      }
    };
  }
};

// 現在のユーザー情報取得
export const getCurrentUser = (): User | null => {
  return auth.currentUser;
};

// 認証状態の監視
export const subscribeToAuthChanges = (callback: (user: User | null) => void) => {
  return onAuthStateChanged(auth, callback);
};

// エラーメッセージの日本語化
const getAuthErrorMessage = (errorCode: string): string => {
  switch (errorCode) {
    case 'auth/email-already-in-use':
      return 'このメールアドレスは既に使用されています';
    case 'auth/invalid-email':
      return '無効なメールアドレスです';
    case 'auth/user-not-found':
      return 'ユーザーが見つかりません';
    case 'auth/wrong-password':
      return 'パスワードが間違っています';
    case 'auth/weak-password':
      return 'パスワードが弱すぎます（6文字以上必要）';
    case 'auth/operation-not-allowed':
      return 'この操作は許可されていません';
    case 'auth/too-many-requests':
      return 'リクエストが多すぎます。しばらく時間をおいて再度お試しください';
    default:
      return '認証エラーが発生しました';
  }
};
