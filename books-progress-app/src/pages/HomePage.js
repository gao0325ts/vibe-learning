// Generated by Copilot
import React, { useState, useEffect } from "react";
import {
  getAllBooks,
  updateProgress,
  deleteBook,
  addBook,
} from "../services/bookService";
import BookCard from "../components/BookCard";

const HomePage = () => {
  // 状態管理
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // 書籍追加モーダル用の状態
  const [showAddModal, setShowAddModal] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    author: "",
    totalPages: 0,
    currentPage: 0,
    memo: "",
  });
  const [formErrors, setFormErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [addSuccess, setAddSuccess] = useState("");
  // 書籍データを読み込む
  useEffect(() => {
    const loadBooks = async () => {
      setLoading(true);
      try {
        const result = await getAllBooks();
        if (result.success) {
          setBooks(result.books);
          setError("");
        } else {
          console.error("書籍データの読み込みエラー:", result.message);
          setBooks([]);
          setError(result.message);
        }
      } catch (err) {
        console.error("書籍データの読み込み例外:", err);
        setBooks([]);
        setError("データの読み込み中にエラーが発生しました");
      } finally {
        setLoading(false);
      }
    };

    loadBooks();
  }, []);
  // 書籍を削除する関数
  const handleDeleteBook = async (id) => {
    // 確認ダイアログを表示
    if (window.confirm("この書籍を削除してもよろしいですか？")) {
      try {
        const result = await deleteBook(id);
        if (result.success) {
          // 画面上の書籍リストを更新
          setBooks(books.filter((book) => book.id !== id));
        } else {
          alert(result.message);
        }
      } catch (err) {
        console.error("書籍削除エラー:", err);
        alert("書籍の削除中にエラーが発生しました");
      }
    }
  };

  // 読書進捗を更新する関数
  const handleUpdateProgress = async (id, newPage) => {
    // 数値以外の入力は無視
    const pageNumber = parseInt(newPage, 10);
    if (isNaN(pageNumber)) return;

    try {
      // サービスを使用して更新
      const result = await updateProgress(id, pageNumber);

      if (result.success) {
        // 書籍リストを更新
        setBooks((prevBooks) =>
          prevBooks.map((book) => (book.id === id ? result.book : book))
        );
        // 結果を返す（BookCardコンポーネントが使用）
        return result;
      } else {
        alert(result.message);
        return { success: false };
      }
    } catch (err) {
      console.error("進捗更新エラー:", err);
      alert("進捗の更新中にエラーが発生しました");
      return { success: false };
    }
  };

  // 書籍リスト（フィルタリングなし）
  const filteredBooks = books;

  // プラスボタンの処理（総ページ数）
  const handleIncrementTotalPages = () => {
    const currentValue =
      formData.totalPages === "" || formData.totalPages === 0
        ? 0
        : parseInt(formData.totalPages, 10);
    const newValue = currentValue + 1;
    setFormData({
      ...formData,
      totalPages: newValue,
    });
  };

  // マイナスボタンの処理（総ページ数）
  const handleDecrementTotalPages = () => {
    const currentValue =
      formData.totalPages === "" || formData.totalPages === 0
        ? 0
        : parseInt(formData.totalPages, 10);
    // 1より小さくならないようにする
    const newValue = Math.max(1, currentValue - 1);
    setFormData({
      ...formData,
      totalPages: newValue,
    });
  };

  // プラスボタンの処理（現在のページ）
  const handleIncrementCurrentPage = () => {
    const currentValue =
      formData.currentPage === "" || formData.currentPage === 0
        ? 0
        : parseInt(formData.currentPage, 10);
    const totalPages =
      formData.totalPages === "" || formData.totalPages === 0
        ? 0
        : parseInt(formData.totalPages, 10);
    // 総ページ数より大きくならないようにする
    const newValue = Math.min(currentValue + 1, totalPages);
    setFormData({
      ...formData,
      currentPage: newValue,
    });
  };

  // マイナスボタンの処理（現在のページ）
  const handleDecrementCurrentPage = () => {
    const currentValue =
      formData.currentPage === "" || formData.currentPage === 0
        ? 0
        : parseInt(formData.currentPage, 10);
    // 0より小さくならないようにする
    const newValue = Math.max(0, currentValue - 1);
    setFormData({
      ...formData,
      currentPage: newValue,
    });
  };

  // フォーム入力変更ハンドラー
  const handleInputChange = (e) => {
    const { name, value } = e.target;

    let processedValue = value;

    if (name === "totalPages" || name === "currentPage") {
      // 空文字列の場合はそのまま（削除操作を許可するため）
      if (value === "") {
        processedValue = 0;
      } else {
        // 数値以外の文字を除去
        const numericValue = value.replace(/[^\d]/g, "");

        // 数値に変換
        processedValue = numericValue ? parseInt(numericValue, 10) : 0;
      }
    }

    setFormData({
      ...formData,
      [name]: processedValue,
    });
  };

  // フォーム送信ハンドラー
  const handleSubmit = async (e) => {
    e.preventDefault();

    // バリデーション
    const newErrors = {};
    if (!formData.title.trim()) {
      newErrors.title = "タイトルは必須です";
    }

    // 著者名の入力は任意に変更
    // if (!formData.author.trim()) {
    //   newErrors.author = "著者名は必須です";
    // }

    if (formData.totalPages <= 0) {
      newErrors.totalPages = "有効なページ数を入力してください";
    }

    if (formData.currentPage < 0) {
      newErrors.currentPage = "現在のページは0以上である必要があります";
    }

    if (formData.currentPage > formData.totalPages) {
      newErrors.currentPage =
        "現在のページは総ページ数を超えることはできません";
    }

    // エラーがあれば更新して関数を終了
    if (Object.keys(newErrors).length > 0) {
      setFormErrors(newErrors);
      return;
    }

    // エラーをリセット
    setFormErrors({});
    setIsSubmitting(true);

    try {
      // BookServiceを使用して書籍を追加（非同期処理）
      const result = await addBook(formData);

      if (result.success) {
        // 成功メッセージを表示
        setAddSuccess("書籍が追加されました！");

        // 書籍リストを更新
        const updatedResult = await getAllBooks();
        if (updatedResult.success) {
          setBooks(updatedResult.books);
        }

        // フォームをリセット
        setFormData({
          title: "",
          author: "",
          totalPages: 0,
          currentPage: 0,
          memo: "",
        });

        // モーダルを閉じる（2秒後）
        setTimeout(() => {
          setShowAddModal(false);
          setAddSuccess("");
        }, 2000);
      } else {
        // エラーメッセージを表示
        setFormErrors({
          submit:
            result.message ||
            "データの保存中にエラーが発生しました。もう一度お試しください。",
        });
      }
    } catch (error) {
      console.error("書籍追加エラー:", error);
      setFormErrors({
        submit: "エラーが発生しました。ネットワーク接続を確認してください。",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // モーダルの外側クリックでモーダルを閉じる
  const handleOutsideClick = (e) => {
    if (e.target.className === "add-book-modal-overlay") {
      setShowAddModal(false);
    }
  };

  // 書籍追加モーダルをレンダリング
  const renderAddBookModal = () => (
    <div className="add-book-modal-overlay" onClick={handleOutsideClick}>
      <div className="add-book-modal">
        <button
          className="close-modal-btn"
          onClick={() => setShowAddModal(false)}
        >
          ×
        </button>

        <h2>新しい書籍を追加</h2>

        {addSuccess && <div className="success-message">{addSuccess}</div>}
        {formErrors.submit && (
          <div className="error-message">{formErrors.submit}</div>
        )}

        <form onSubmit={handleSubmit}>
          <div className="form-group">
            <label htmlFor="title">
              タイトル <span className="required">*</span>
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
              className={formErrors.title ? "error" : ""}
              disabled={isSubmitting}
            />
            {formErrors.title && (
              <p className="error-text">{formErrors.title}</p>
            )}
          </div>{" "}
          <div className="form-group">
            <label htmlFor="author">著者</label>
            <input
              type="text"
              id="author"
              name="author"
              value={formData.author}
              onChange={handleInputChange}
              className={formErrors.author ? "error" : ""}
              disabled={isSubmitting}
            />
            {formErrors.author && (
              <p className="error-text">{formErrors.author}</p>
            )}
          </div>
          <div className="form-group">
            <label htmlFor="totalPages">
              総ページ数 <span className="required">*</span>
            </label>
            <div className="progress-input">
              <button
                type="button"
                className="page-control-btn page-decrement-btn"
                onClick={handleDecrementTotalPages}
                disabled={
                  !formData.totalPages ||
                  formData.totalPages <= 1 ||
                  isSubmitting
                }
              >
                －
              </button>
              <input
                type="text"
                id="totalPages"
                name="totalPages"
                value={formData.totalPages}
                onChange={handleInputChange}
                inputMode="numeric"
                className={formErrors.totalPages ? "error" : ""}
                disabled={isSubmitting}
                placeholder="0"
              />
              <button
                type="button"
                className="page-control-btn page-increment-btn"
                onClick={handleIncrementTotalPages}
                disabled={isSubmitting}
              >
                ＋
              </button>
            </div>
            {formErrors.totalPages && (
              <p className="error-text">{formErrors.totalPages}</p>
            )}
          </div>
          <div className="form-group">
            <label htmlFor="currentPage">現在のページ</label>
            <div className="progress-input">
              <button
                type="button"
                className="page-control-btn page-decrement-btn"
                onClick={handleDecrementCurrentPage}
                disabled={
                  !formData.currentPage ||
                  formData.currentPage <= 0 ||
                  isSubmitting
                }
              >
                －
              </button>
              <input
                type="text"
                id="currentPage"
                name="currentPage"
                value={formData.currentPage}
                onChange={handleInputChange}
                inputMode="numeric"
                className={formErrors.currentPage ? "error" : ""}
                disabled={isSubmitting}
                placeholder="0"
              />
              <button
                type="button"
                className="page-control-btn page-increment-btn"
                onClick={handleIncrementCurrentPage}
                disabled={
                  !formData.totalPages ||
                  (formData.currentPage !== 0 &&
                    formData.currentPage >= formData.totalPages) ||
                  isSubmitting
                }
              >
                ＋
              </button>
              {formData.totalPages > 0 && <span>/ {formData.totalPages}</span>}
            </div>
            {formErrors.currentPage && (
              <p className="error-text">{formErrors.currentPage}</p>
            )}
          </div>
          <div className="form-group">
            <label htmlFor="memo">メモ（任意）</label>
            <textarea
              id="memo"
              name="memo"
              value={formData.memo}
              onChange={handleInputChange}
              rows="3"
              disabled={isSubmitting}
            />
          </div>
          <div className="form-actions">
            <button type="submit" className="btn" disabled={isSubmitting}>
              {isSubmitting ? "追加中..." : "書籍を追加"}
            </button>
            <button
              type="button"
              className="btn btn-secondary"
              onClick={() => setShowAddModal(false)}
              disabled={isSubmitting}
            >
              キャンセル
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  return (
    <div>
      <h2 className="page-title">書籍リスト</h2> {/* 追加ボタン */}
      <div className="book-list-actions">
        <button
          className="btn add-book-btn"
          onClick={() => setShowAddModal(true)}
        >
          + 新しい書籍を追加
        </button>
      </div>
      {loading ? (
        <p className="loading-message">読み込み中...</p>
      ) : error ? (
        <div className="error-state">
          <p className="error-message">{error}</p>
          <button className="btn" onClick={() => window.location.reload()}>
            再読み込み
          </button>
        </div>
      ) : filteredBooks.length > 0 ? (
        <div className="books-grid">
          {filteredBooks.map((book) => (
            <BookCard
              key={book.id}
              book={book}
              onUpdateProgress={handleUpdateProgress}
              onDelete={handleDeleteBook}
            />
          ))}
        </div>
      ) : (
        <div className="empty-state">
          <h3>書籍がありません</h3>
          <p>新しい書籍を追加してみましょう！</p>
          <button className="btn" onClick={() => setShowAddModal(true)}>
            書籍を追加
          </button>
        </div>
      )}
      {/* 書籍追加モーダル */}
      {showAddModal && renderAddBookModal()}
    </div>
  );
};

export default HomePage;
