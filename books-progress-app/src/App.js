// Generated by Copilot
import React, { useState, useEffect } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  NavLink,
} from "react-router-dom";
import { FiSun, FiMoon } from "react-icons/fi";
import "./App.css";

// ページコンポーネントをインポート
import HomePage from "./pages/HomePage";
import BookListPage from "./pages/BookListPage";
import AddBookPage from "./pages/AddBookPage";

function App() {
  // テーマ状態の管理
  const [isDarkMode, setIsDarkMode] = useState(false);

  // ユーザーのシステム設定を確認
  useEffect(() => {
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    setIsDarkMode(prefersDark);

    // ローカルストレージから以前の設定を取得
    const savedTheme = localStorage.getItem("theme");
    if (savedTheme) {
      setIsDarkMode(savedTheme === "dark");
    }
  }, []);

  // テーマの切り替え関数
  const toggleTheme = () => {
    const newTheme = !isDarkMode;
    setIsDarkMode(newTheme);
    localStorage.setItem("theme", newTheme ? "dark" : "light");
    document.body.className = newTheme ? "dark-mode" : "light-mode";
  };

  // body要素にクラスを適用
  useEffect(() => {
    document.body.className = isDarkMode ? "dark-mode" : "light-mode";
  }, [isDarkMode]);

  return (
    <Router>
      <div className="App">
        {" "}
        <header className="header">
          <nav className="nav">
            <h1>Page Tracker</h1>
            <div className="nav-links">
              <NavLink
                to="/stats"
                className={({ isActive }) => (isActive ? "active" : "")}
              >
                統計
              </NavLink>
              <NavLink
                to="/"
                className={({ isActive }) => (isActive ? "active" : "")}
              >
                書籍リスト
              </NavLink>
              <NavLink
                to="/add"
                className={({ isActive }) => (isActive ? "active" : "")}
              >
                書籍追加
              </NavLink>
            </div>
          </nav>
        </header>{" "}
        <main className="main-content">
          <Routes>
            <Route path="/stats" element={<HomePage />} />
            <Route path="/" element={<BookListPage />} />
            <Route path="/add" element={<AddBookPage />} />
          </Routes>
        </main>{" "}
        <footer className="footer">
          <p>&copy; {new Date().getFullYear()} Page Tracker</p>
        </footer>{" "}
        {/* ダークモード切り替えボタン */}
        <button
          className="theme-toggle"
          onClick={toggleTheme}
          aria-label="テーマ切り替え"
          title={
            isDarkMode ? "ライトモードに切り替え" : "ダークモードに切り替え"
          }
        >
          {isDarkMode ? (
            <FiSun className="theme-icon" />
          ) : (
            <FiMoon className="theme-icon" />
          )}
        </button>
      </div>
    </Router>
  );
}

export default App;
