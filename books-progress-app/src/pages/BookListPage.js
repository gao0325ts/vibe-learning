// Generated by Copilot
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import {
  getAllBooks,
  updateProgress,
  deleteBook,
} from "../services/bookService";
import BookCard from "../components/BookCard";

const BookListPage = () => {
  // 状態管理
  const [books, setBooks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState("all"); // all, reading, completed

  // 書籍データを読み込む
  useEffect(() => {
    const loadBooks = () => {
      const result = getAllBooks();
      if (result.success) {
        setBooks(result.books);
      } else {
        console.error("書籍データの読み込みエラー:", result.message);
        setBooks([]);
      }
      setLoading(false);
    };

    loadBooks();
  }, []);

  // 書籍を削除する関数
  const handleDeleteBook = (id) => {
    // 確認ダイアログを表示
    if (window.confirm("この書籍を削除してもよろしいですか？")) {
      const result = deleteBook(id);
      if (result.success) {
        // 画面上の書籍リストを更新
        setBooks(books.filter((book) => book.id !== id));
      } else {
        alert(result.message);
      }
    }
  };

  // 読書進捗を更新する関数
  const handleUpdateProgress = (id, newPage) => {
    // 数値以外の入力は無視
    const pageNumber = parseInt(newPage, 10);
    if (isNaN(pageNumber)) return;

    // サービスを使用して更新
    const result = updateProgress(id, pageNumber);

    if (result.success) {
      // 書籍リストを更新
      setBooks((prevBooks) =>
        prevBooks.map((book) => (book.id === id ? result.book : book))
      );
    } else {
      alert(result.message);
    }
  };

  // フィルター済みの書籍リストを取得
  const filteredBooks = books.filter((book) => {
    if (filter === "reading") return !book.isCompleted;
    if (filter === "completed") return book.isCompleted;
    return true; // 'all' の場合は全て表示
  });

  // BookListPageではこれらの関数が不要なため削除
  // 必要な計算はBookCardコンポーネント内部で行われています

  return (
    <div>
      <h2 className="page-title">書籍リスト</h2>

      {/* フィルターボタン */}
      <div className="filter-buttons">
        <button
          className={`btn ${filter === "all" ? "" : "btn-secondary"}`}
          onClick={() => setFilter("all")}
        >
          すべて
        </button>
        <button
          className={`btn ${filter === "reading" ? "" : "btn-secondary"}`}
          onClick={() => setFilter("reading")}
        >
          読書中
        </button>
        <button
          className={`btn ${filter === "completed" ? "" : "btn-secondary"}`}
          onClick={() => setFilter("completed")}
        >
          完読
        </button>
      </div>

      {loading ? (
        <p className="loading-message">読み込み中...</p>
      ) : filteredBooks.length > 0 ? (
        <div className="books-grid">
          {filteredBooks.map((book) => (
            <BookCard
              key={book.id}
              book={book}
              onUpdateProgress={handleUpdateProgress}
              onDelete={handleDeleteBook}
            />
          ))}
        </div>
      ) : (
        <div className="empty-state">
          <h3>書籍がありません</h3>
          <p>新しい書籍を追加してみましょう！</p>
          <Link to="/add" className="btn">
            書籍を追加
          </Link>
        </div>
      )}
    </div>
  );
};

export default BookListPage;
