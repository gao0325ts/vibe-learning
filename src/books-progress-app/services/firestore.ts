import {
  collection,
  doc,
  getDoc,
  getDocs,
  addDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  DocumentData,
  Timestamp,
  QuerySnapshot,
} from "firebase/firestore";
import { db } from "./firebase";
import { Book, NewBook, ReadingStats } from "../types";
import { getCurrentUser } from "./auth";

/**
 * Firestoreデータベースサービス - 書籍および読書データの管理
 *
 * Generated by Copilot
 */

// 書籍コレクション参照
const booksCollection = collection(db, "books");
const statsCollection = collection(db, "reading_stats");

// 書籍の追加
export const addBook = async (bookData: NewBook) => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    const now = new Date();
    const newBook = {
      ...bookData,
      userId: user.uid,
      currentPage: bookData.currentPage || 0,
      progress: bookData.currentPage
        ? (bookData.currentPage / bookData.totalPages) * 100
        : 0,
      startDate: bookData.startDate || now,
      lastUpdateDate: now,
    };

    const docRef = await addDoc(booksCollection, newBook);
    return { id: docRef.id, success: true, error: null };
  } catch (error: any) {
    return {
      id: null,
      success: false,
      error: {
        code: error.code || "unknown",
        message: error.message || "エラーが発生しました",
      },
    };
  }
};

// 書籍の更新
export const updateBook = async (id: string, bookData: Partial<Book>) => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    // 現在のページ数が更新された場合は進捗率も計算
    let updatedData: Partial<Book> = { ...bookData };

    // 現在のドキュメントを取得し、totalPagesを取得
    if (bookData.currentPage !== undefined) {
      const bookDoc = await getDoc(doc(db, "books", id));
      if (bookDoc.exists()) {
        const existingBook = bookDoc.data() as Book;
        const totalPages = existingBook.totalPages;
        updatedData.progress = (bookData.currentPage / totalPages) * 100;
      }
    }

    // 最終更新日時を設定
    updatedData.lastUpdateDate = new Date();

    await updateDoc(doc(db, "books", id), updatedData);
    await updateReadingStats(user.uid);

    return { success: true, error: null };
  } catch (error: any) {
    return {
      success: false,
      error: {
        code: error.code || "unknown",
        message: error.message || "エラーが発生しました",
      },
    };
  }
};

// 書籍の取得（単一）
export const getBookById = async (id: string) => {
  try {
    const bookDoc = await getDoc(doc(db, "books", id));
    if (!bookDoc.exists()) {
      throw new Error("書籍が見つかりません");
    }

    return {
      book: { id: bookDoc.id, ...bookDoc.data() } as Book,
      error: null,
    };
  } catch (error: any) {
    return {
      book: null,
      error: {
        code: error.code || "not-found",
        message: error.message || "書籍データの取得に失敗しました",
      },
    };
  }
};

// ユーザーの全書籍取得
export const getAllBooks = async () => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    const q = query(
      booksCollection,
      where("userId", "==", user.uid),
      orderBy("lastUpdateDate", "desc")
    );

    const querySnapshot = await getDocs(q);
    const books: Book[] = [];

    querySnapshot.forEach((doc) => {
      books.push({ id: doc.id, ...doc.data() } as Book);
    });

    return { books, error: null };
  } catch (error: any) {
    return {
      books: [],
      error: {
        code: error.code || "unknown",
        message: error.message || "書籍リストの取得に失敗しました",
      },
    };
  }
};

// 書籍の削除
export const deleteBook = async (id: string) => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    await deleteDoc(doc(db, "books", id));
    await updateReadingStats(user.uid);

    return { success: true, error: null };
  } catch (error: any) {
    return {
      success: false,
      error: {
        code: error.code || "unknown",
        message: error.message || "書籍の削除に失敗しました",
      },
    };
  }
};

// 進捗の更新
export const updateBookProgress = async (id: string, currentPage: number) => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    // 書籍の取得
    const bookDoc = await getDoc(doc(db, "books", id));
    if (!bookDoc.exists()) {
      throw new Error("書籍が見つかりません");
    }

    const bookData = bookDoc.data() as Book;
    if (currentPage > bookData.totalPages) {
      throw new Error("現在のページ数が総ページ数を超えています");
    }

    // 進捗を計算
    const progress = (currentPage / bookData.totalPages) * 100;

    // 書籍データを更新
    await updateDoc(doc(db, "books", id), {
      currentPage,
      progress,
      lastUpdateDate: new Date(),
    });

    // 読書統計を更新
    await updateReadingStats(user.uid);

    return { success: true, error: null };
  } catch (error: any) {
    return {
      success: false,
      error: {
        code: error.code || "unknown",
        message: error.message || "進捗の更新に失敗しました",
      },
    };
  }
};

// 統計データの取得
export const getReadingStats = async () => {
  try {
    const user = getCurrentUser();
    if (!user) {
      throw new Error("ユーザーがログインしていません");
    }

    // 統計データの取得
    const q = query(statsCollection, where("userId", "==", user.uid));
    const querySnapshot = await getDocs(q);

    if (querySnapshot.empty) {
      // 統計データがなければ新規作成
      return await updateReadingStats(user.uid);
    }

    // 最初の統計データを返す
    const statDoc = querySnapshot.docs[0];
    return {
      stats: { id: statDoc.id, ...statDoc.data() } as ReadingStats,
      error: null,
    };
  } catch (error: any) {
    return {
      stats: null,
      error: {
        code: error.code || "unknown",
        message: error.message || "統計データの取得に失敗しました",
      },
    };
  }
};

// 読書統計の更新（内部関数）
const updateReadingStats = async (userId: string) => {
  try {
    // ユーザーの全書籍を取得
    const q = query(booksCollection, where("userId", "==", userId));
    const querySnapshot = await getDocs(q);

    let totalBooks = 0;
    let totalPagesRead = 0;
    let totalProgress = 0;
    let completedBooks = 0;

    querySnapshot.forEach((doc) => {
      const book = doc.data() as Book;
      totalBooks++;
      totalPagesRead += book.currentPage;
      totalProgress += book.progress;

      if (book.currentPage >= book.totalPages) {
        completedBooks++;
      }
    });

    const averageProgress = totalBooks > 0 ? totalProgress / totalBooks : 0;

    // 統計データの更新または作成
    const statsQuery = query(statsCollection, where("userId", "==", userId));
    const statsSnapshot = await getDocs(statsQuery);

    const statsData = {
      userId,
      totalBooks,
      totalPagesRead,
      completedBooks,
      averageProgress,
    };

    let statId = "";

    if (statsSnapshot.empty) {
      // 新規作成
      const newStatDoc = await addDoc(statsCollection, statsData);
      statId = newStatDoc.id;
    } else {
      // 更新
      const statDoc = statsSnapshot.docs[0];
      statId = statDoc.id;
      await updateDoc(doc(db, "reading_stats", statId), statsData);
    }

    return {
      stats: { id: statId, ...statsData } as ReadingStats,
      error: null,
    };
  } catch (error: any) {
    return {
      stats: null,
      error: {
        code: error.code || "unknown",
        message: error.message || "統計データの更新に失敗しました",
      },
    };
  }
};
