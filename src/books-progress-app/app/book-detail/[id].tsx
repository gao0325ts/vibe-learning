import { useState } from "react";
import { StyleSheet, Text, TextInput, View, TouchableOpacity, Alert, ScrollView } from "react-native";
import { useLocalSearchParams, Stack, useRouter } from "expo-router";
import { useColorScheme } from "react-native";
import { colorScheme, Colors } from "../../constants/Colors";

/**
 * 書籍詳細・進捗更新画面
 * URLパラメーターからIDを取得して書籍データを表示・編集
 * 
 * Generated by Copilot
 */
export default function BookDetailScreen() {
  const { id } = useLocalSearchParams<{ id: string }>();
  const router = useRouter();
  const colorMode = useColorScheme();
  const colors = colorMode === 'dark' ? colorScheme.dark : colorScheme.light;
  
  // 仮のデータ - あとで実際のFirebaseデータと置き換え
  const [book, setBook] = useState({
    id: id || '1',
    title: "読み込み中...",
    author: "",
    totalPages: 0,
    currentPage: 0,
    progress: 0,
  });

  const [currentPage, setCurrentPage] = useState('0');

  // 進捗更新処理（後で実装）
  const updateProgress = () => {
    const newCurrentPage = parseInt(currentPage, 10);

    if (isNaN(newCurrentPage)) {
      Alert.alert("エラー", "数値を入力してください");
      return;
    }

    if (newCurrentPage > book.totalPages) {
      Alert.alert("エラー", "総ページ数を超えています");
      return;
    }

    // 実際のデータ更新処理（後で実装）
    Alert.alert("進捗更新", "進捗を更新しました（ダミー）");
  };

  return (
    <>
      <Stack.Screen 
        options={{ 
          title: book.title,
        }} 
      />
      <ScrollView style={[styles.container, { backgroundColor: colors.background }]}>
        <View style={styles.bookInfo}>
          <Text style={[styles.label, { color: colors.text }]}>タイトル</Text>
          <Text style={[styles.value, { color: colors.text }]}>{book.title}</Text>
          
          <Text style={[styles.label, { color: colors.text }]}>著者</Text>
          <Text style={[styles.value, { color: colors.text }]}>{book.author}</Text>
          
          <Text style={[styles.label, { color: colors.text }]}>総ページ数</Text>
          <Text style={[styles.value, { color: colors.text }]}>{book.totalPages} ページ</Text>
          
          <Text style={[styles.label, { color: colors.text }]}>現在の進捗</Text>
          <View style={styles.progressBar}>
            <View 
              style={[
                styles.progressFill, 
                { width: `${book.progress}%`, backgroundColor: Colors.progressBar }
              ]} 
            />
          </View>
          <Text style={[styles.progressText, { color: colors.text }]}>
            {book.currentPage} / {book.totalPages} ページ ({book.progress}%)
          </Text>
        </View>
        
        <View style={styles.updateSection}>
          <Text style={[styles.updateTitle, { color: colors.text }]}>
            進捗を更新
          </Text>
          
          <View style={styles.inputContainer}>
            <TextInput
              style={[
                styles.input,
                { color: colors.text, borderColor: colors.border, backgroundColor: colors.card }
              ]}
              keyboardType="number-pad"
              value={currentPage}
              onChangeText={setCurrentPage}
              placeholder="現在のページ"
              placeholderTextColor={Colors.placeholder}
            />
            <Text style={[styles.inputLabel, { color: colors.text }]}>ページ</Text>
          </View>
          
          <TouchableOpacity
            style={[styles.updateButton, { backgroundColor: Colors.primary }]}
            onPress={updateProgress}
          >
            <Text style={styles.updateButtonText}>更新する</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  bookInfo: {
    marginBottom: 24,
  },
  label: {
    fontSize: 14,
    marginBottom: 4,
    opacity: 0.7,
  },
  value: {
    fontSize: 18,
    marginBottom: 16,
  },
  progressBar: {
    height: 10,
    backgroundColor: Colors.progressBackground,
    borderRadius: 5,
    marginVertical: 8,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 5,
  },
  progressText: {
    fontSize: 14,
    textAlign: 'right',
    marginBottom: 16,
  },
  updateSection: {
    backgroundColor: 'rgba(0,0,0,0.03)',
    borderRadius: 8,
    padding: 16,
    marginBottom: 24,
  },
  updateTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
  },
  input: {
    flex: 1,
    height: 48,
    borderWidth: 1,
    borderRadius: 8,
    paddingHorizontal: 12,
    fontSize: 16,
    marginRight: 8,
  },
  inputLabel: {
    fontSize: 16,
    width: 50,
  },
  updateButton: {
    height: 48,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  updateButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
